if (isModuleUtils.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "com.blankj.bus"
apply plugin: "androidx.navigation.safeargs.kotlin" // navigation 导航
apply plugin: 'com.alibaba.arouter' // Gradle 插件实现路由表的自动加载
apply plugin: 'dagger.hilt.android.plugin' // 依赖注入

android {
    compileSdkVersion skdVersion.compileSdkVersion //编译时使用 Android版本
    buildToolsVersion = skdVersion.buildToolsVersion //编译时使用的构建工具的版本

    defaultConfig {
        // 独立调试才需要这些配置
        if (isModuleUtils.toBoolean()) {
            applicationId "com.base.module.utils"
        }

        targetSdkVersion skdVersion.targetSdkVersion //目标版本
        minSdkVersion skdVersion.minSdkVersion //最低兼容Android版本

        versionCode libVersion.utilsCode
        versionName libVersion.utilsName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    // 路由需要
    kapt {
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
    }
    sourceSets {
        main {
            // 独立调试与集成调试时使用不同的 AndroidManifest.xml 文件
            if (isModuleUtils.toBoolean()) {
                manifest.srcFile 'src/main/moduleManifest/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }

    buildTypes {
        release {
            consumerProguardFiles file('.').listFiles(new FilenameFilter() {
                @Override
                boolean accept(File file, String s) {
                    return s.endsWith('.pro')
                }
            })
        }
        debug {
            consumerProguardFiles file('.').listFiles(new FilenameFilter() {
                @Override
                boolean accept(File file, String s) {
                    return s.endsWith('.pro')
                }
            })
        }
    }

    // 启用 viewBinding
    buildFeatures {
        viewBinding = true
    }
    lintOptions {
        // 发现错误,是否停止构建
        abortOnError true
    }
    compileOptions {
        encoding "utf-8"
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
        useIR = true
    }
}

dependencies {
    def dependencies = rootProject.ext.dependencies

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation(project(':module_common'))

    if (useLocalDependencies()) {
        implementation(project(':library'))
    } else {
        implementation dependencies.BaseLibrary
    }

    // Kotlin中使用了Glide注解
    kapt dependencies.glideCompiler
    // 路由
    kapt dependencies.arouterCompiler
    // 依赖注入
    implementation dependencies.hilt
    kapt dependencies.hiltCompiler

}